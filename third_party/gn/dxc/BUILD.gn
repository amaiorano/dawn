# Copyright 2023 The Dawn Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../scripts/dawn_overrides_with_defaults.gni")

import("${dawn_root}/scripts/dawn_features.gni")

# TODO(amaiorano): Validate that we can copy these from LLVM
import("build/write_cmake_config.gni")
import("build/triples.gni")
import("build/targets.gni")
import("build/version.gni")
import("build/tablegen.gni")

llvm_target_triple = "dxil-ms-dx" # Force target triple
dawn_dxc_gn_dir = "${dawn_dxc_dir}/../gn"

write_cmake_config("config-header") {
  input = "${dawn_dxc_dir}/include/llvm/Config/config.h.cmake"
  output = "$target_gen_dir/include/llvm/Config/config.h"
  values = [
    # TODO(amaiorano): Many of the flags set here are duplicated for the "llvm-config-header" target below.
    # Factor this out somehow (template?).

    # TODO(amaiorano): enable this flag when asserts are enabled
    "LLVM_ENABLE_ABI_BREAKING_CHECKS=0",
    "LLVM_ENABLE_THREADS=1",
    "LLVM_HAS_ATOMICS=1",
    "HAVE_INTTYPES_H=1",
    "HAVE_STDINT_H=1",
    "HAVE_UINT64_T=1",
    "HAVE_U_INT64_T=1",
    "LLVM_BINDIR=",
    "LLVM_CONFIGTIME=",    
    "LLVM_DATADIR=",    
    "LLVM_DEFAULT_TARGET_TRIPLE=$llvm_target_triple",
    "LLVM_DOCSDIR=",
    "LLVM_ETCDIR=",
    "LLVM_HOST_TRIPLE=$llvm_current_triple",
    "LLVM_INCLUDEDIR=",
    "LLVM_INFODIR=",
    "LLVM_MANDIR=",
    "LLVM_NATIVE_ARCH=$native_target",
    "LLVM_PREFIX=",
    "LLVM_VERSION_MAJOR=$llvm_version_major",
    "LLVM_VERSION_MINOR=$llvm_version_minor",
    "LLVM_VERSION_PATCH=$llvm_version_patch",
    "PACKAGE_VERSION=${llvm_version}git",
    "PACKAGE_BUGREPORT=http://llvm.org/bugs/",
    "PACKAGE_NAME=LLVM",
    "PACKAGE_STRING=LLVM ${llvm_version}git",
    "strdup=strdup",
    "stricmp=stricmp",
    "strtoll=strtoll",
    "strtoull=strtoull",


    #@TODO(amaiorano): Revisit variables below. Most are just unset for now.
    "ENABLE_BACKTRACES=",
    "ENABLE_CRASH_OVERRIDES=",
    "DISABLE_LLVM_DYLIB_ATEXIT=",
    "ENABLE_PIC=",
    "HAVE_DECL_STRERROR_S=",
    "HAVE_ISATTY=1",
    "LLVM_ENABLE_ZLIB=",
    "LLVM_USE_INTEL_JITEVENTS=",
    "LLVM_USE_OPROFILE=",
    "LINK_POLLY_INTO_TOOLS=",
    "BUG_REPORT_URL=",
    "ENABLE_TIMESTAMPS=",
    "HAVE____CHKSTK_MS=",
    "HAVE____CHKSTK=",
    "HAVE___ALLOCA=",
    "HAVE___ASHLDI3=",
    "HAVE___ASHRDI3=",
    "HAVE___CHKSTK_MS=",
    "HAVE___CHKSTK=",
    "HAVE___CMPDI2=",
    "HAVE___DIVDI3=",
    "HAVE___FIXDFDI=",
    "HAVE___FIXSFDI=",
    "HAVE___FLOATDIDF=",
    "HAVE___LSHRDI3=",
    "HAVE___MAIN=",
    "HAVE___MODDI3=",
    "HAVE___UDIVDI3=",
    "HAVE___UMODDI3=",
    "HAVE__ALLOCA=",
    "HAVE__CHSIZE_S=",
    "HAVE_BACKTRACE=",
    "HAVE_CLOSEDIR=",
    "HAVE_CXXABI_H=",
    "HAVE_DECL_ARC4RANDOM=",
    "HAVE_DIA_SDK=",
    "HAVE_DIRENT_H=",
    "HAVE_DLERROR=",
    "HAVE_DLFCN_H=",
    "HAVE_DLOPEN=",
    "HAVE_ERRNO_H=",
    "HAVE_EXECINFO_H=",
    "HAVE_FCNTL_H=",
    "HAVE_FENV_H=",
    "HAVE_FFI_CALL=",
    "HAVE_FFI_FFI_H=",
    "HAVE_FFI_H=",
    "HAVE_FUTIMENS=",
    "HAVE_FUTIMES=",
    "HAVE_GETCWD=",
    "HAVE_GETPAGESIZE=",
    "HAVE_GETRLIMIT=",
    "HAVE_GETRUSAGE=",
    "HAVE_GETTIMEOFDAY=",
    "HAVE_INT64_T=",
    "HAVE_LIBDL=",
    "HAVE_LIBEDIT=",
    "HAVE_LIBPSAPI=",
    "HAVE_LIBPTHREAD=",
    "HAVE_LIBSHELL32=",
    "HAVE_LIBZ=",
    "HAVE_LIMITS_H=",
    "HAVE_LINK_H=",
    "HAVE_LONGJMP=",
    "HAVE_MACH_MACH_H=",
    "HAVE_MACH_O_DYLD_H=",
    "HAVE_MALLCTL=",
    "HAVE_MALLINFO=",
    "HAVE_MALLINFO2=",
    "HAVE_MALLOC_H=",
    "HAVE_MALLOC_MALLOC_H=",
    "HAVE_MALLOC_ZONE_STATISTICS=",
    "HAVE_MKDTEMP=",
    "HAVE_MKSTEMP=",
    "HAVE_MKTEMP=",
    "HAVE_NDIR_H=",
    "HAVE_OPENDIR=",
    "HAVE_POSIX_SPAWN=",
    "HAVE_PREAD=",
    "HAVE_PTHREAD_GETSPECIFIC=",
    "HAVE_PTHREAD_H=",
    "HAVE_PTHREAD_MUTEX_LOCK=",
    "HAVE_PTHREAD_RWLOCK_INIT=",
    "HAVE_RAND48=",
    "HAVE_READDIR=",
    "HAVE_REALPATH=",
    "HAVE_SBRK=",
    "HAVE_SETENV=",
    "HAVE_SETJMP=",
    "HAVE_SETRLIMIT=",
    "HAVE_SIGLONGJMP=",
    "HAVE_SIGNAL_H=",
    "HAVE_SIGSETJMP=",
    "HAVE_STRDUP=",
    "HAVE_STRERROR_R=",
    "HAVE_STRERROR=",
    "HAVE_STRTOLL=",
    "HAVE_STRTOQ=",
    "HAVE_SYS_DIR_H=",
    "HAVE_SYS_IOCTL_H=",
    "HAVE_SYS_NDIR_H=",
    "HAVE_SYS_PARAM_H=",
    "HAVE_SYS_RESOURCE_H=",
    "HAVE_SYS_STAT_H=",
    "HAVE_SYS_TIME_H=",
    "HAVE_SYS_TYPES_H=",
    "HAVE_SYS_UIO_H=",
    "HAVE_SYS_WAIT_H=",
    "HAVE_TERMINFO=",
    "HAVE_TERMIOS_H=",
    "HAVE_UNISTD_H=",
    "HAVE_UTIME_H=",
    "HAVE_VALGRIND_VALGRIND_H=",
    "HAVE_WRITEV=",
    "HAVE_ZLIB_H=",
    "LTDL_DLOPEN_DEPLIBS=",
    "LTDL_SHLIB_EXT=",
    "LTDL_SYSSEARCHPATH=",
    "RETSIGTYPE=",
    "WIN32_ELMCB_PCSTR=",    
  ]

  # NOTE: These are meta-definitions for the variable (not value) to determine
  # whether they should be defined or undefined in the generated header.
  if (false && llvm_build_native) {
    values += [
      "LLVM_NATIVE_ASMPARSER=1",
      "LLVM_NATIVE_ASMPRINTER=1",
      "LLVM_NATIVE_DISASSEMBLER=1",
      "LLVM_NATIVE_TARGET=1",
      "LLVM_NATIVE_TARGETINFO=1",
      "LLVM_NATIVE_TARGETMC=1",
    ]
  } else {
    values += [
      "LLVM_NATIVE_ASMPARSER=",
      "LLVM_NATIVE_ASMPRINTER=",
      "LLVM_NATIVE_DISASSEMBLER=",
      "LLVM_NATIVE_TARGET=",
      "LLVM_NATIVE_TARGETINFO=",
      "LLVM_NATIVE_TARGETMC=",
    ]  
  }

  if (is_win) {
    values += [
      "LLVM_ON_UNIX=",
      "LLVM_ON_WIN32=1",
    ]
  } else {
    values += [
      "LLVM_ON_UNIX=1",
      "LLVM_ON_WIN32=",
    ]
  }
}

write_cmake_config("llvm-config-header") {
  input = "${dawn_dxc_dir}/include/llvm/Config/llvm-config.h.cmake"
  output = "$target_gen_dir/include/llvm/Config/llvm-config.h"
  values = [
    "LLVM_BINDIR=",
    "LLVM_CONFIGTIME=",
    "LLVM_DATADIR=",
    "LLVM_DEFAULT_TARGET_TRIPLE=$llvm_target_triple",
    "LLVM_DOCSDIR=",
    # TODO(amaiorano): enable this flag when asserts are enabled
    "LLVM_ENABLE_ABI_BREAKING_CHECKS=0",
    "LLVM_ETCDIR=",
    "LLVM_HAS_ATOMICS=1",
    "LLVM_HOST_TRIPLE=$llvm_current_triple",
    "LLVM_INCLUDEDIR=",
    "LLVM_INFODIR=",
    "LLVM_MANDIR=",
    "LLVM_NATIVE_ARCH=$native_target",
    "LLVM_PREFIX=",
    "LLVM_USE_INTEL_JITEVENTS=",
    "LLVM_USE_OPROFILE=",
    "LLVM_VERSION_MAJOR=$llvm_version_major",
    "LLVM_VERSION_MINOR=$llvm_version_minor",
    "LLVM_VERSION_PATCH=$llvm_version_patch",
    "PACKAGE_VERSION=${llvm_version}git",
    "LINK_POLLY_INTO_TOOLS=",
    "LLVM_ENABLE_THREADS=1",
  ]

  # NOTE: These are meta-definitions for the variable (not value) to determine
  # whether they should be defined or undefined in the generated header.
  if (false && llvm_build_native) {
    values += [
      "LLVM_NATIVE_ASMPARSER=1",
      "LLVM_NATIVE_ASMPRINTER=1",
      "LLVM_NATIVE_DISASSEMBLER=1",
      "LLVM_NATIVE_TARGET=1",
      "LLVM_NATIVE_TARGETINFO=1",
      "LLVM_NATIVE_TARGETMC=1",
    ]
  } else {
    values += [
      "LLVM_NATIVE_ASMPARSER=",
      "LLVM_NATIVE_ASMPRINTER=",
      "LLVM_NATIVE_DISASSEMBLER=",
      "LLVM_NATIVE_TARGET=",
      "LLVM_NATIVE_TARGETINFO=",
      "LLVM_NATIVE_TARGETMC=",
    ]
  }

  if (is_win) {
    values += [
      "LLVM_ON_UNIX=",
      "LLVM_ON_WIN32=1",
    ]
  } else {
    values += [
      "LLVM_ON_UNIX=1",
      "LLVM_ON_WIN32=0",
    ]
  }
}

write_cmake_config("DataTypes-header") {
  input = "${dawn_dxc_dir}/include/llvm/Support/DataTypes.h.cmake"
  output = "$target_gen_dir/include/llvm/Support/DataTypes.h"
  values = [
    "HAVE_INTTYPES_H=1",
    "HAVE_STDINT_H=1",
    "HAVE_UINT64_T=1",
    "HAVE_U_INT64_T=1",
  ]
}

write_cmake_config("Targets-def") {
  input = "${dawn_dxc_dir}/include/llvm/Config/Targets.def.in"
  output = "$target_gen_dir/include/llvm/Config/Targets.def"
  values = [
    # TODO(amaiorano): Should normally contain list of supported targets,
    # which I think should be AMDGPU and NVPTX based on LLVM_ALL_TARGETS
    # in the root CMakeLists.txt, but building with CMake, the generated
    # TargetsDef.h has no value at all for this...
    "LLVM_ENUM_TARGETS=",
  ]
}

write_cmake_config("AsmPrinters-def") {
  input = "${dawn_dxc_dir}/include/llvm/Config/AsmPrinters.def.in"
  output = "$target_gen_dir/include/llvm/Config/AsmPrinters.def"
  values = [
    "LLVM_ENUM_ASM_PRINTERS=",
  ]
}

write_cmake_config("AsmParsers-def") {
  input = "${dawn_dxc_dir}/include/llvm/Config/AsmParsers.def.in"
  output = "$target_gen_dir/include/llvm/Config/AsmParsers.def"
  values = [
    "LLVM_ENUM_ASM_PARSERS=",
  ]
}

write_cmake_config("Disassemblers-def") {
  input = "${dawn_dxc_dir}/include/llvm/Config/Disassemblers.def.in"
  output = "$target_gen_dir/include/llvm/Config/Disassemblers.def"
  values = [
    "LLVM_ENUM_DISASSEMBLERS=",
  ]
}


config("common_config") {
  if (is_win) {
    warning_flags = [
      "-Wno-error", # For now, allow warnings @TODO(amaiorano): replace with specific warning disables
      "-Wno-unknown-pragmas",
      "-Wno-shadow",
      "-Wno-deprecated-declarations",
      "-Wno-deprecated-enum-float-conversion",
      "-Wno-extra-semi",
      "-Wno-reorder-ctor",
      "-Wno-implicit-fallthrough",
      "-Wno-header-hygiene",
      "-Wno-unused-const-variable",
      "-Wno-implicit-fallthrough",
      "-Wno-sign-compare",
      "-Wno-unused-but-set-variable",
      "-Wno-unreachable-code-return",
      "-Wno-unreachable-code-break",
      "-Wno-unused-function",
      "-Wno-unused-local-typedef",
      "-Wno-string-conversion",
      "-Wno-macro-redefined",
      "-Wno-unreachable-code",
      "-Wno-switch",
    ]

    cflags_cc = [
      "/EHsc", # DXC uses exceptions
      "/std:c++17", # TODO(amaiorano): Not sure I need this
      "/Zc:__cplusplus",
    ] + warning_flags

    cflags_c = [
      "/EHsc", # DXC uses exceptions
      "/std:c17",
    ] + warning_flags
  }

  include_dirs = [
    "${dawn_dxc_dir}/include",
    "${dawn_dxc_dir}/tools/clang/tools",
    "${dawn_dxc_dir}/include/llvm/llvm_assert",
    "${target_gen_dir}/include", # Generated files
  ]
}

static_library("Support") {
  output_name = "LLVMSupport"

  public_configs = [
    ":common_config"
  ]

  public_deps = [
    ":config-header",
    ":Targets-def",
    ":AsmPrinters-def",
    ":AsmParsers-def",
    ":Disassemblers-def",
    ":llvm-config-header",
  ]

  sources = [
      "${dawn_dxc_dir}/lib/MSSupport/MSFileSystemImpl.cpp",

      "${dawn_dxc_dir}/lib/Support/APFloat.cpp",
      "${dawn_dxc_dir}/lib/Support/APInt.cpp",
      "${dawn_dxc_dir}/lib/Support/APSInt.cpp",
      "${dawn_dxc_dir}/lib/Support/ARMBuildAttrs.cpp",
      "${dawn_dxc_dir}/lib/Support/ARMWinEH.cpp",
      "${dawn_dxc_dir}/lib/Support/Allocator.cpp",
      "${dawn_dxc_dir}/lib/Support/BlockFrequency.cpp",
      "${dawn_dxc_dir}/lib/Support/BranchProbability.cpp",
      "${dawn_dxc_dir}/lib/Support/circular_raw_ostream.cpp",
      "${dawn_dxc_dir}/lib/Support/COM.cpp",
      "${dawn_dxc_dir}/lib/Support/CommandLine.cpp",
      "${dawn_dxc_dir}/lib/Support/Compression.cpp",
      "${dawn_dxc_dir}/lib/Support/ConvertUTF.c",
      "${dawn_dxc_dir}/lib/Support/ConvertUTFWrapper.cpp",
      "${dawn_dxc_dir}/lib/Support/CrashRecoveryContext.cpp",
      "${dawn_dxc_dir}/lib/Support/DataExtractor.cpp",
      "${dawn_dxc_dir}/lib/Support/DataStream.cpp",
      "${dawn_dxc_dir}/lib/Support/Debug.cpp",
      "${dawn_dxc_dir}/lib/Support/DeltaAlgorithm.cpp",
      "${dawn_dxc_dir}/lib/Support/DAGDeltaAlgorithm.cpp",
      "${dawn_dxc_dir}/lib/Support/Dwarf.cpp",
      "${dawn_dxc_dir}/lib/Support/ErrorHandling.cpp",
      "${dawn_dxc_dir}/lib/Support/FileUtilities.cpp",
      "${dawn_dxc_dir}/lib/Support/FileOutputBuffer.cpp",
      "${dawn_dxc_dir}/lib/Support/FoldingSet.cpp",
      "${dawn_dxc_dir}/lib/Support/FormattedStream.cpp",
      "${dawn_dxc_dir}/lib/Support/GraphWriter.cpp",
      "${dawn_dxc_dir}/lib/Support/Hashing.cpp",
      "${dawn_dxc_dir}/lib/Support/IntEqClasses.cpp",
      "${dawn_dxc_dir}/lib/Support/IntervalMap.cpp",
      "${dawn_dxc_dir}/lib/Support/IntrusiveRefCntPtr.cpp",
      "${dawn_dxc_dir}/lib/Support/LEB128.cpp",
      "${dawn_dxc_dir}/lib/Support/LineIterator.cpp",
      "${dawn_dxc_dir}/lib/Support/Locale.cpp",
      "${dawn_dxc_dir}/lib/Support/LockFileManager.cpp",
      "${dawn_dxc_dir}/lib/Support/ManagedStatic.cpp",
      "${dawn_dxc_dir}/lib/Support/MathExtras.cpp",
      "${dawn_dxc_dir}/lib/Support/MemoryBuffer.cpp",
      "${dawn_dxc_dir}/lib/Support/MemoryObject.cpp",
      "${dawn_dxc_dir}/lib/Support/MSFileSystemBasic.cpp",
      "${dawn_dxc_dir}/lib/Support/MD5.cpp",
      "${dawn_dxc_dir}/lib/Support/Options.cpp",
      # PluginLoader.cpp    # HLSL Change Starts - no support for plug-in loader
      "${dawn_dxc_dir}/lib/Support/PrettyStackTrace.cpp",
      "${dawn_dxc_dir}/lib/Support/RandomNumberGenerator.cpp",
      "${dawn_dxc_dir}/lib/Support/Regex.cpp",
      "${dawn_dxc_dir}/lib/Support/ScaledNumber.cpp",
      "${dawn_dxc_dir}/lib/Support/SmallPtrSet.cpp",
      "${dawn_dxc_dir}/lib/Support/SmallVector.cpp",
      "${dawn_dxc_dir}/lib/Support/SourceMgr.cpp",
      "${dawn_dxc_dir}/lib/Support/SpecialCaseList.cpp",
      "${dawn_dxc_dir}/lib/Support/Statistic.cpp",
      "${dawn_dxc_dir}/lib/Support/StreamingMemoryObject.cpp",
      "${dawn_dxc_dir}/lib/Support/StringExtras.cpp",
      "${dawn_dxc_dir}/lib/Support/StringMap.cpp",
      "${dawn_dxc_dir}/lib/Support/StringPool.cpp",
      "${dawn_dxc_dir}/lib/Support/StringSaver.cpp",
      "${dawn_dxc_dir}/lib/Support/StringRef.cpp",
      "${dawn_dxc_dir}/lib/Support/SystemUtils.cpp",
      "${dawn_dxc_dir}/lib/Support/TargetParser.cpp",
      "${dawn_dxc_dir}/lib/Support/Timer.cpp",
      "${dawn_dxc_dir}/lib/Support/ToolOutputFile.cpp",
      "${dawn_dxc_dir}/lib/Support/Triple.cpp",
      "${dawn_dxc_dir}/lib/Support/Twine.cpp",
      "${dawn_dxc_dir}/lib/Support/Unicode.cpp",
      "${dawn_dxc_dir}/lib/Support/YAMLParser.cpp",
      "${dawn_dxc_dir}/lib/Support/YAMLTraits.cpp",
      "${dawn_dxc_dir}/lib/Support/raw_os_ostream.cpp",
      "${dawn_dxc_dir}/lib/Support/raw_ostream.cpp",
      "${dawn_dxc_dir}/lib/Support/regcomp.c",
      "${dawn_dxc_dir}/lib/Support/regerror.c",
      "${dawn_dxc_dir}/lib/Support/regexec.c",
      "${dawn_dxc_dir}/lib/Support/regfree.c",
      "${dawn_dxc_dir}/lib/Support/regstrlcpy.c",
      "${dawn_dxc_dir}/lib/Support/regmalloc.cpp", # HLSL Change

      # System
      "${dawn_dxc_dir}/lib/Support/assert.cpp",      # HLSL Change
      "${dawn_dxc_dir}/lib/Support/Atomic.cpp",
      # DynamicLibrary.cpp # HLSL Change - no support for interpreter or jit
      "${dawn_dxc_dir}/lib/Support/Errno.cpp",
      "${dawn_dxc_dir}/lib/Support/Host.cpp",
      "${dawn_dxc_dir}/lib/Support/Memory.cpp",
      "${dawn_dxc_dir}/lib/Support/Mutex.cpp",
      "${dawn_dxc_dir}/lib/Support/Path.cpp",
      "${dawn_dxc_dir}/lib/Support/Process.cpp",
      "${dawn_dxc_dir}/lib/Support/Program.cpp",
      "${dawn_dxc_dir}/lib/Support/RWMutex.cpp",
      "${dawn_dxc_dir}/lib/Support/SearchForAddressOfSpecialSymbol.cpp",
      "${dawn_dxc_dir}/lib/Support/Signals.cpp",
      "${dawn_dxc_dir}/lib/Support/TargetRegistry.cpp",
      "${dawn_dxc_dir}/lib/Support/ThreadLocal.cpp",
      "${dawn_dxc_dir}/lib/Support/Threading.cpp",
      "${dawn_dxc_dir}/lib/Support/TimeProfiler.cpp", # HLSL Change - Support hierarchial time tracing.
      "${dawn_dxc_dir}/lib/Support/TimeValue.cpp",
      "${dawn_dxc_dir}/lib/Support/Valgrind.cpp",
      "${dawn_dxc_dir}/lib/Support/Watchdog.cpp", 
  ]
}

write_cmake_config("SharedLibAffix-h") {
  input = "${dawn_dxc_dir}/lib/DxcSupport/SharedLibAffix.inc"
  output = "$target_gen_dir/include/dxc/Support/SharedLibAffix.h"
  values = [
    # TODO(amaiorano): Expose arg to set these?
    "CMAKE_SHARED_LIBRARY_PREFIX=",
    "CMAKE_SHARED_LIBRARY_SUFFIX=",
  ]
}

static_library("DxcSupport") {
  output_name = "LLVMDxcSupport"

  public_configs = [
    ":common_config",
  ]

  public_deps = [
    ":HLSLOptions-inc",
    ":SharedLibAffix-h",
  ]

  sources = [
      "${dawn_dxc_dir}/lib/DxcSupport/dxcapi.use.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/dxcmem.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/FileIOHelper.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/Global.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/HLSLOptions.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/Unicode.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/WinAdapter.cpp",
      "${dawn_dxc_dir}/lib/DxcSupport/WinFunctions.cpp",    
  ]
}

executable("llvm-tblgen") {
  deps = [
    ":Support"
  ]

  sources = [
    # Note: Is a static library "TableGen" in CMake
    "${dawn_dxc_dir}/lib/TableGen/Error.cpp",
    "${dawn_dxc_dir}/lib/TableGen/Main.cpp",
    "${dawn_dxc_dir}/lib/TableGen/Record.cpp",
    "${dawn_dxc_dir}/lib/TableGen/SetTheory.cpp",
    "${dawn_dxc_dir}/lib/TableGen/StringMatcher.cpp",
    "${dawn_dxc_dir}/lib/TableGen/TableGenBackend.cpp",
    "${dawn_dxc_dir}/lib/TableGen/TGLexer.cpp",
    "${dawn_dxc_dir}/lib/TableGen/TGParser.cpp",
    # 
    "${dawn_dxc_dir}/utils/TableGen/AsmMatcherEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/AsmWriterEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/AsmWriterInst.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CallingConvEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeEmitterGen.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenDAGPatterns.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenInstruction.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenMapTable.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenRegisters.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenSchedule.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CodeGenTarget.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DAGISelEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DAGISelMatcherEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DAGISelMatcherGen.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DAGISelMatcherOpt.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DAGISelMatcher.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DFAPacketizerEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/DisassemblerEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/FastISelEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/FixedLenDecoderEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/InstrInfoEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/IntrinsicEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/OptParserEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/PseudoLoweringEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/RegisterInfoEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/SubtargetEmitter.cpp",
    "${dawn_dxc_dir}/utils/TableGen/TableGen.cpp",
    "${dawn_dxc_dir}/utils/TableGen/CTagsEmitter.cpp",
  ]
}

tablegen("HLSLOptions-inc") {
  args = ["-gen-opt-parser-defs"]
  td_file = "${dawn_dxc_dir}/include/dxc/Support/HLSLOptions.td"
  output_name = "include/dxc/Support/HLSLOptions.inc"
  tblgen_target = ":llvm-tblgen"
}

tablegen("Intrinsics-td") {
  args = ["-gen-intrinsic"]
  td_file = "${dawn_dxc_dir}/include/llvm/IR/Intrinsics.td"
  output_name = "include/llvm/IR/Intrinsics.gen"
  tblgen_target = ":llvm-tblgen"
}

static_library("dxclib") {
  public_configs = [
    ":common_config"
  ]
  
  configs -= [
    # DXC is built with multibyte character set, so it expects Win32 functions to map the ANSI ones, not the UNICODE ones.
    "//build/config/win:unicode"
  ]

  public_deps = [
    ":DataTypes-header",
    ":Support",
    ":DxcSupport",
    ":Intrinsics-td",
  ]
  sources = [
    "${dawn_dxc_dir}/tools/clang/tools/dxclib/dxc.cpp",

    "${dawn_dxc_dir}/lib/DxilContainer/DxilContainer.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/DxilContainerAssembler.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/DxilContainerReader.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/DxcContainerBuilder.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/DxilRDATBuilder.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/DxilRuntimeReflection.cpp",
    "${dawn_dxc_dir}/lib/DxilContainer/RDATDxilSubobjects.cpp",

    "${dawn_dxc_dir}/lib/DXIL/DxilCBuffer.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilCompType.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilCounters.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilInterpolationMode.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilMetadataHelper.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilModule.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilModuleHelper.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilOperations.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilResource.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilResourceBase.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilResourceBinding.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilResourceProperties.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilSampler.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilSemantic.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilShaderFlags.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilShaderModel.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilSignature.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilSignatureElement.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilSubobject.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilTypeSystem.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilUtil.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilUtilDbgInfoAndMisc.cpp",
    "${dawn_dxc_dir}/lib/DXIL/DxilPDB.cpp",

    "${dawn_dxc_dir}/lib/Option/Arg.cpp",
    "${dawn_dxc_dir}/lib/Option/ArgList.cpp",
    "${dawn_dxc_dir}/lib/Option/Option.cpp",
    "${dawn_dxc_dir}/lib/Option/OptTable.cpp",
  ]
}

executable("dxc") {
  if (dawn_has_build) {
    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
  }

  deps = [
    ":dxclib"
  ]
  # include_dirs = [
  #   "${dawn_dxc_dir}/include",
  #  ]
  sources = [
    "${dawn_dxc_dir}/tools/clang/tools/dxc/dxcmain.cpp",
  ]
}
