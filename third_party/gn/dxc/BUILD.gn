# Copyright 2023 The Dawn Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../scripts/dawn_overrides_with_defaults.gni")

import("${dawn_root}/scripts/dawn_features.gni")

# TODO(amaiorano): Validate that we can copy these from LLVM
import("build/write_cmake_config.gni")
import("build/triples.gni")
import("build/targets.gni")
import("build/version.gni")

# TODO(amaiorano): Move this somewhere?
dawn_dxc_gn_dir = "${dawn_dxc_dir}/../gn"

declare_args() {
  # From utils\gn\build\libs\pthread\enable.gni
  # Whether to enable threading.
  llvm_enable_threads = true
}

write_cmake_config("llvm-config") {
  input = "${dawn_dxc_dir}/include/llvm/Config/llvm-config.h.cmake"
  output = "$target_gen_dir/include/llvm/Config/llvm-config.h"
  values = [
    "LLVM_BINDIR=",
    "LLVM_CONFIGTIME=",
    "LLVM_DATADIR=",
    "LLVM_DEFAULT_TARGET_TRIPLE=$llvm_target_triple",
    "LLVM_DOCSDIR=",
    # TODO(amaiorano): enable this flag when asserts are enabled
    "LLVM_ENABLE_ABI_BREAKING_CHECKS=0",
    "LLVM_ETCDIR=",
    "LLVM_HAS_ATOMICS=1",
    "LLVM_HOST_TRIPLE=$llvm_current_triple",
    "LLVM_INCLUDEDIR=",
    "LLVM_INFODIR=",
    "LLVM_MANDIR=",
    "LLVM_NATIVE_ARCH=$native_target",
    "LLVM_PREFIX=",
    "LLVM_USE_INTEL_JITEVENTS=",
    "LLVM_USE_OPROFILE=",
    "LLVM_VERSION_MAJOR=$llvm_version_major",
    "LLVM_VERSION_MINOR=$llvm_version_minor",
    "LLVM_VERSION_PATCH=$llvm_version_patch",
    "PACKAGE_VERSION=${llvm_version}git",
    "LINK_POLLY_INTO_TOOLS=",
  ]

  if (llvm_build_native) {
    values += [
      "LLVM_NATIVE_ASMPARSER=1",
      "LLVM_NATIVE_ASMPRINTER=1",
      "LLVM_NATIVE_DISASSEMBLER=1",
      "LLVM_NATIVE_TARGET=1",
      "LLVM_NATIVE_TARGETINFO=1",
      "LLVM_NATIVE_TARGETMC=1",
    ]
  } else {
    values += [
      "LLVM_NATIVE_ASMPARSER=",
      "LLVM_NATIVE_ASMPRINTER=",
      "LLVM_NATIVE_DISASSEMBLER=",
      "LLVM_NATIVE_TARGET=",
      "LLVM_NATIVE_TARGETINFO=",
      "LLVM_NATIVE_TARGETMC=",
    ]
  }

  if (current_os == "win") {
    values += [
      "LLVM_ON_UNIX=",
      "LLVM_ON_WIN32=1",
    ]
  } else {
    values += [
      "LLVM_ON_UNIX=1",
      "LLVM_ON_WIN32=0",
    ]
  }

  if (llvm_enable_threads) {
    values += [ "LLVM_ENABLE_THREADS=1" ]
  } else {
    values += [ "LLVM_ENABLE_THREADS=" ]
  }
}

write_cmake_config("DataTypes") {
  input = "${dawn_dxc_dir}/include/llvm/Support/DataTypes.h.cmake"
  output = "$target_gen_dir/include/llvm/Support/DataTypes.h"
  values = [
    "HAVE_INTTYPES_H=1",
    "HAVE_STDINT_H=1",
    "HAVE_UINT64_T=1",
    "HAVE_U_INT64_T=1",
  ]
}

config("dxclib_config") {
  if (is_win) {
    cflags_cc = [
      "/EHsc", # DXC uses exceptions
      "-Wno-error" # For now, allow warnings @TODO(amaiorano): replace with specific warning disables
      ]
  }

  include_dirs = [
    "${dawn_dxc_dir}/include",
    "${dawn_dxc_dir}/tools/clang/tools",
    "${target_gen_dir}/include" # Generated files
  ]
}

static_library("dxclib") {
  public_configs = [
    ":dxclib_config"
  ]
  public_deps = [
    ":llvm-config",
    ":DataTypes",
  ]
  sources = [
    "${dawn_dxc_dir}/tools/clang/tools/dxclib/dxc.cpp",
  ]
}

executable("dxc") {
  if (dawn_has_build) {
    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
  }

  deps = [
    ":dxclib"
  ]
  # include_dirs = [
  #   "${dawn_dxc_dir}/include",
  #  ]
  sources = [
    "${dawn_dxc_dir}/tools/clang/tools/dxc/dxcmain.cpp",
  ]
}
